name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

jobs:
  test:
    name: Pre-release Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.22-

    - name: Download dependencies
      run: go mod download

    - name: Run comprehensive test suite
      run: go run ./cmd/test_runner.go

    - name: Run integration tests with API (if token available)
      env:
        SPACETRADERS_API_TOKEN: ${{ secrets.SPACETRADERS_API_TOKEN }}
      run: |
        if [ -n "$SPACETRADERS_API_TOKEN" ]; then
          echo "Running integration tests with real API..."
          go run ./cmd/test_runner.go --integration
        else
          echo "⚠️  No API token available, skipping real API tests"
        fi

  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.22-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.22-

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="spacetraders-mcp-${{ steps.version.outputs.version }}-${{ matrix.suffix }}"
        go build -ldflags="-w -s -X main.version=${{ steps.version.outputs.version }}" -o "$BINARY_NAME" .

        # Create checksums
        if command -v sha256sum >/dev/null; then
          sha256sum "$BINARY_NAME" > "$BINARY_NAME.sha256"
        else
          shasum -a 256 "$BINARY_NAME" > "$BINARY_NAME.sha256"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-binaries
        path: |
          spacetraders-mcp-*
          *.sha256
        retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-binaries
        path: ./release-files

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        CHANGELOG=$(cat << 'EOF'
        ## What's Changed

        This release includes:
        - Latest stable version of SpaceTraders MCP Server
        - Cross-platform binaries for Linux, macOS, and Windows
        - All recent bug fixes and improvements

        ## Installation

        ### Download Binary
        1. Download the appropriate binary for your platform from the assets below
        2. Make it executable (Linux/macOS): `chmod +x spacetraders-mcp-*`
        3. Move to your PATH or use directly

        ### Verify Download
        Each binary includes a SHA256 checksum file for verification:
        ```bash
        sha256sum -c spacetraders-mcp-*.sha256
        ```

        ### Claude Desktop Integration
        Add to your Claude Desktop configuration:
        ```json
        {
          "mcpServers": {
            "spacetraders": {
              "command": "/path/to/spacetraders-mcp-binary",
              "args": []
            }
          }
        }
        ```

        ## Requirements
        - SpaceTraders API token (get one at https://spacetraders.io/)
        - Create a `.env` file with: `SPACETRADERS_API_TOKEN=your_token_here`

        ## Platform Support
        - **Linux**: AMD64, ARM64
        - **macOS**: Intel (AMD64), Apple Silicon (ARM64)
        - **Windows**: AMD64

        ---
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/previous...${{ steps.version.outputs.version }}
        EOF
        )
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: SpaceTraders MCP Server ${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        files: |
          ./release-files/spacetraders-mcp-*
        generate_release_notes: true

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: secrets.DOCKER_USERNAME != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/spacetraders-mcp
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [create-release, docker]
    if: always() && needs.create-release.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update README badge
      run: |
        echo "✅ Release ${{ steps.version.outputs.version }} completed successfully!"
        echo "📦 Binaries available at: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
        if [ "${{ needs.docker.result }}" = "success" ]; then
          echo "🐳 Docker images pushed to registries"
        fi

    - name: Create success notification
      if: secrets.SLACK_WEBHOOK_URL != ''
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"🎉 SpaceTraders MCP Server ${{ steps.version.outputs.version }} has been released!\n📦 https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
